<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="do.sibsutis.ru">

  <title>Лекция 6. Конспект лекций</title>
	
	<link rel="icon" type="image/png" href="../lib/css/favicon.png">
  <!-- Bootstrap Core CSS -->
  <link href="../lib/css/bootstrap.css" rel="stylesheet">
	
  <!-- Custom CSS -->
  <link href="../lib/css/scrolling-nav.css" rel="stylesheet">

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>

<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->

<body id="page-top" data-spy="scroll" data-target=".navbar-fixed-top">
  <!-- Navigation -->
<nav class="navbar navbar-default navbar-fixed-top">
 <div class="container">
  <!-- Brand and toggle get grouped for better mobile display -->
  <div class="navbar-header">
   <li class="hidden"> <a class="page-scroll" href="#page-top"></a> </li>
	 
	 <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
   </button>
	 
   <a class="navbar-brand " href="../index.htm"> 
  <text class = "hidden-xs">Защита информации</text> 
  <text class = "visible-xs">ЗИ</text>
	 </a>
  </div>

  <!-- Collect the nav links, forms, and glyphicon glyphicon-list-alt content for toggling -->
  <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
   
	 <!-- <ul class="nav navbar-nav">
		<li><a href="#"></a></li> 
   </ul> -->
	
   <ul class="nav navbar-nav navbar-right">
    <li class="dropdown">
		<button type="button" class="navbar-toggle dropdown-toggle hidden-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>	   
		<a class = "dropdown-toggle visible-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Материалы</a>
     <ul class="dropdown-menu">
    <li><a href="../index.htm">Аннотация курса</a></li>
      <li role="separator" class="divider"></li>
  
 <li><a href="lec_index.htm">Теория</a></li>
   
 <li><a href="c_work.htm">Контрольная работа</a></li>

 
<li><a href="labs.htm">Лабораторные работы</a></li> 
      <li role="separator" class="divider"></li>
    
      <li><a href="lit.htm">Литература</a></li>
      <!--li><a href="q.htm">Вопросы для самопроверки</a></li-->			
     </ul>
 </li>
 </ul>
  </div><!-- /.navbar-collapse -->
 </div><!-- /.container-fluid -->
</nav>


  <div id="intro" class="section content-section ">
    <div class="container">
       <div class="row">
        <div class="col-lg-12">	


<!-- содержание -->	
<div class="page-header">				
<h3><a href="lec6.htm">6.Криптографические протоколы</a></h3>
<a href="lec6.htm#1" class=punkt>6.1. Доказательства с нулевым знанием</a><br>
<a href="lec6.htm#2" class=punkt>6.2. Электронные деньги</a><br>
<a href="lec6.htm#3" class=punkt>6.3. Взаимная идентификация с установлением ключа</a><br>
<a href="lec6.htm#4" class=punkt>Задачи и упражнения</a><br>
<a href="lec6.htm#5" class=punkt>Ответы к задачам и упражнениям</a><br>

</div>
<!--начало-->
<p>Рассмотренные в предыдущих главах криптографические методы часто используются в качестве инструментов для решения других практически важны задач. Современная криптография позволяет решать проблемы, которые ранее считались в принципе неразрешимыми. Причем в настоящее время многие такие возможности криптографии используются в реальных компьютерных системах. Это и заключение коммерческих сделок в режиме удаленного взаимодействия участников, и осуществление денежных расчетов по сети, и проведение выборов по компьютерным сетям, и многое другое. Методы решения подобных задач обычно описываются в форме так называемых криптографических протоколов. Некоторые из них будут представлены в этой главе. </p>
<p>Обратим внимание читателя на то, что криптографические алгоритмы не просто предоставляют новые возможности пользователю (например, не нужно ходить в банк, можно произвести все необходимые операции со своего домашнего компьютера). Важно то, что они способны обеспечивать надежность значительно более высокую, чем традиционные механизмы. Например, если бумажную банкноту можно подделать, и случаи подделок весьма многочисленны, то электронную банкноту, созданную при помощи криптографических методов, подделать практически невозможно.</p>
<br>
<a name=1 class="anchor"></a>
<h3>6.1. Доказательства с нулевым знанием</h3>
<p>Рассмотрим следующую задачу, возникающую в некоторых криптографических приложениях. Снова участвуют Алиса и Боб. Алиса знает решение некоторой сложной задачи, она хочет убедить Боба в этом, однако так, чтобы Боб не узнал самого решения задачи. Т.е. в результате Боб должен убедиться в том, что Алиса знает решение, но не должен узнать что-нибудь о самом решении. На первый взгляд сама задача кажется абсурдной, а возможность ее решения фантастической! Для того чтобы лучше понять ситуацию, рассмотрим случай из жизни пиратов. Пусть, например, Алиса знает карту острова, где спрятан клад, а Боб капитан корабля, который может доставить ее на остров. Алиса хочет доказать, что карта у нее есть, не показывая ее Бобу (иначе Боб обойдется без Алисы, и весь клад достанется ему). </p>
<p>Такая же задача актуальна для компьютерных сетей в тех случаях, когда Боб (сервер или контроллер домена) должен принять решение о допуске Алисы к информации, хранящейся в сети, но при этом Алиса не хочет, чтобы кто-либо, прослушивающий канал передачи данных и сам сервер, получил какие-либо знания о ее пароле. Т.е. Боб получает «нулевое знание» о пароле (или карте) Алисы, но уверен, что у Алисы такой пароль (или карта) есть. </p>
<p>Итак, наша задача построить протокол «доказательства с нулевым знанием». При этом мы считаем, что каждый из участников может вести «нечестную» игру и пытаться обмануть другого. </p>
<p>В качестве сложной задачи, решение которой известно Алисе, мы рассмотрим задачу нахождения гамильтонова цикла в графе. Отметим, что эта задача NР-полная. Мы не приводим формального определения NР-полноты, которое может быть найдено, например, в [1].  Для читателя, не знакомого с этим определением, отметим только, что NР-полнота задачи неформально означает, что время решения задачи растет экспоненциально с ростом размера задачи (объема исходных данных). </p>
<p><b><i>Задача о нахождении гамильтонова цикла в графе </i></b></p>
<p>Рассматриваемая в данном разделе задача не просто предоставляет нам возможность описать одну схему построения протокола доказательства с нулевым знанием, но и имеет важное теоретическое значение. Блюм (Manuel Blum)  показал, что, выражаясь неформально, любое математическое утверждение может быть представлено в виде графа, причем доказательство этого утверждения соответствует гамильтонову циклу в этом графе (см., например, [2б]). Поэтому наличие протокола доказательства с нулевым знанием для гамильтонова цикла означает, что доказательство любого математического утверждения может быть представлено в форме доказательства с нулевым знанием. </p>
<p><b>Определение 6.1.</b> <i>Гамильтоновым циклом</i> в графе называется непрерывный путь, проходящий через все вершины графа ровно по одному разу. </p>
<p>П р и м е р б.1. Рассмотрим граф, изображенный на рис. б.1. </p>
<p>Путь, проходящий последовательно через вершины 8, 2, 4, б, 3, 5, 7, 1, представляет собой гамильтонов цикл. Действительно, в этом пути содержатся все вершины графа, и каждая вершина посещается только один раз. </p>
<p><img src="img/image550.png" height="221" width="246"></p>
<p>Рис. 6.1. Граф с гамильтоновым циклом (8, 2, 4, 6, 3, 5, 7, 1) </p><br>
<p>Ясно, что если в графе <i>G</i> с <i>n</i> вершинами гамильтонов цикл существует, то при некоторой нумерации вершин он пройдет точно через вершины с последовательными номерами 1, 2, 3, ... , n. Поэтому путем перебора всех возможных нумераций вершин мы обязательно найдем гамильтонов цикл. Но количество возможных нумераций равно <i>n!</i>, и поэтому уже при умеренно больших n, например, при n 100, такой подход становится практически нереализуемым. Доказано, что задача нахождения гамильтонова цикла в графе является NР-полной. Мы уже говорили кратко о понятии NР-полноты. Неформально, NР-полнота рассматриваемой задачи означает, что для ее решения не существуют (точнее, неизвестны) алгоритмы существенно более быстрые, чем указанный метод перебора.</p>
<p> Нашей задачей будет построение криптографического протокола, с помощью которого Алиса будет доказывать Бобу, что она знает гамильтонов цикл в некотором графе <i>G</i> так, чтобы Боб не получил никаких знаний о самом этом цикле. Иными словами, Алиса будет предоставлять Бобу доказательство с нулевым знанием. Еще раз напомним читателю, что «нулевое знание» означает, что независимо от числа реализаций протокола доказательства Боб будет располагать точно такими же сведениями о гамильтоновом цикле, какие он мог бы получить, просто изучая представленный ему граф <i>G</i>. </p>
<p>Итак, допустим, что Алиса знает гамильтонов цикл в графе <i>G</i>. Теперь она может это доказывать Бобу и всем, кто имеет граф <i>G</i>, с  помощью описываемого ниже протокола. Алиса может использовать это доказательство, например, для идентификации своей личности. Но прежде чем мы перейдем к описанию протокола, договоримся о некоторых обозначениях. </p>
<p>Мы будем обозначать графы буквами <i>G, Н, F</i>, понимая под этим одновременно соответствующие матрицы смежности. Элемент матрицы <i>Н<sub>ij</sub> = 1</i>, если в графе <i>Н</i> есть ребро, соединяющее вершины <i>i</i> и <i>j</i>; <i>Н<sub>ij</sub> = 0 </i>в противном случае. Символом || будем обозначать конкатенацию (сцепление) двух чисел, точнее, двоичных слов, им соответствующих. Нам понадобится шифр с открытым ключом. Вообще говоря, это может быть любой шифр, но для определенности будем использовать шифр RSA (разд. 2.б). Будем считать, что Алиса сформировала систему RSA с открытыми параметрами <i>N</i> и <i>d</i>. Важно, что зашифрованные в этой системе сообщения может расшифровать только Алиса и больше никто.</p>
<p>Протокол доказательства состоит из следующих четырех шагов (пояснения будут даны ниже). </p>
<p><b>Шаг 1.</b> Алиса строит граф <i>Н</i>, являющийся копией исходного графа <i>G</i>, где у всех вершин новые, случайно выбранные номера. На языке теории графов говорят, что <i>Н</i> изоморфен <i>G</i>. Иными словами, <i>Н</i> получается путем некоторой перестановки вершин в графе <i>G</i> (с сохранением связей между вершинами). Алиса кодирует матрицу <i>Н</i>, приписывая к первоначально содержащимся в ней нулям и единицам случайные числа <i>r<sub<ij</sub></i> по схеме <img src="img/image551.png" height="25" width="110">. Затем она шифрует элементы матрицы <i>Н</i>, получая зашифрованную матрицу <i>F</i>, <img src="img/image552.png" height="26" width="160">. Матрицу <i>F</i> Алиса передает Бобу. </p>
<p><b>Шаг 2.</b> Боб, получив зашифрованный граф F, задает Алисе один из двух вопросов. </p>
<p class=punkt>1. Каков гамильтонов цикл для графа <i>Н</i>?</p>
<p class=punkt>2. Действительно ли граф <i>Н</i> изоморфен <i>G</i>? </p>
<p><b>Шаг З.</b> Алиса отвечает на соответствующий вопрос Боба. </p>
<p class=punkt>1. Она расшифровывает в <i>F</i> ребра, образующие гамильтонов цикл. </p>
<p class=punkt>2. Она расшифровывает <i>F</i> полностью (фактически передает Бобу граф <img src="img/image553.png" height="19" width="17">) и предъявляет перестановки, с помощью которых граф <i>Н</i> был получен из графа <i>G</i>. </p>
<p><b>Шаг 4.</b> Получив ответ, Боб проверяет правильность расшифровки путем повторного шифрования и сравнения с <i>F</i> и убеждается либо в том, что показанные ребра действительно образуют гамильтонов цикл, либо в том, что предъявленные перестановки действительно переводят граф <i>G</i> в граф <i>Н</i>. </p>
<p>Весь протокол повторяется <i>t</i> раз. </p>
<p>Обсудим вначале кратко несколько вопросов по построению протокола. </p>
<p class=punkt>1. Зачем Алиса строит изоморфный граф? Если бы она этого не делала, то Боб, получив ответ на свой вопрос номер один, узнал бы гамильтонов цикл в графе <i>G</i>. </p>
<p class=punkt>2. Зачем Алиса кодирует матрицу <i>Н</i>? С этим приемом мы уже встречались при шифровании цветов вершин графа. Дело в том, что невозможно зашифровать непосредственно нули и единицы (с помощью шифра RSA они вообще не шифруются). Даже если заменить их на какие-то произвольные числа <i>а</i> и <i>b</i>, то мы получим всего два различны шифротекста, и Бобу не со-ставит труда понять, какой из них какому числу соответствует. Т.е. структура графа не будет скрыта. Здесь мы сталкиваемся
с типичной ситуацией, когда требуется использовать так называемый рандомизированный шифр. И такой шифр строится путем добавления случайны чисел в матрицу <i>Н</i> перед шифрованием. Закодированная матрица <sup><img src="img/image553.png" height="19" width="17"></sup> точно также задает граф (нечетность числа означает наличие ребра, четность его отсутствие), но после шифрования <sup><img src="img/image553.png" height="19" width="17"></sup> структура графа полностью скрывается (мы используем известное свойство шифра RSA он полностью скрывает четность числа [22]). </p>
<p class=punkt>3. Зачем Боб задает два вопроса? Если бы он задавал только вопрос номер один, который по смыслу протокола является основным, то Алиса, не зная в действительности гамильтонова цикла в графе <i>G</i>, могла бы предъявить Бобу совсем другой граф с таким же количеством вершин и искуственно заложенным в него гамильтоновым циклом. Поэтому Боб иногда просит Алису доказать изоморфизм графов <i>Н</i> и <i>G</i>. Важно, что Алиса не знает заранее, какой из двух вопросов задаст Боб. </p>
<p class=punkt>4. Почему Боб не может задать сразу двух вопросов? В этом случае он узнал бы гамильтонов цикл в <i>G</i>, так как ему был бы показан гамильтонов цикл в <i>Н</i> и правило перехода от <i>Н</i> к <i>G</i>. </p>
<p class=punkt>5. Зачем Боб проверяет правильность расшифровки? Если бы он этого не делал, то Алиса на четвертом шаге могла бы предоставить ему «выгодную» для себя информацию, а не ту, которую она посылала ему на втором шаге. </p>
<p>Более точно основные детали протокола обосновываются в ходе доказательства двух основных утверждений. </p>
<p><b>Утверждение б.1.</b> <i>Вероятность обмана при t реализациях протокола не превосходит 2<sup>-t</sup></i>.</p>
<p>Д о к а з а т е л ь с т в о. Вначале покажем, что вероятность обмана в одной реализации протокола равна 1/2. Заметим, что если Алиса действительно знает гамильтонов цикл в графе <i>G</i>, то она может правильно ответить на любой вопрос Боба. Если же она не знает гамильтонов цикл, то самое большее, что она может сделать, это подготовиться к ответу на первый либо на второй вопрос. В ожидании первого вопроса, она создает новый граф с искусственно заложенным в него гамильтоновым циклом. Но в этом случае она не сможет доказать его изоморфизм графу <i>G</i> . В ожидании второго вопроса, она строит граф, изоморфный графу <i>G</i> . Но в этом случае она не сможет показать в нем гамильтонов цикл. Таким образом, вероятность успешности обмана равна вероятности угадывания номера вопроса. В предположении, что Боб задает оба вопроса с одинаковыми вероятностями, мы получаем, что вероятность обмана равна 1/2.</p>
<p> Так как Боб прекращает игру при первом же неправильном ответе, вероятность обмана при <i>t</i> реализациях протокола не превосходит (1/2)<sup>t</sup>. </p>
<p><b>Утверждение б.2.</b> <i>Представленный протокол реализует доказательство с нулевым знанием</i>. </p>
<p>Д о к а з а т е л ь с т в о. Чтобы доказать, что Боб не получает никаких знаний в ходе реализации протокола, достаточно показать, что все, что он получает от Алисы, он мог бы получить сам, не вступая с ней ни в какое общение. </p>
<p>Рассмотрим вначале второй вопрос Боба. В ответ на этот вопрос он получает граф, изоморфный графу <i>G</i>. Но он сам мог строить сколько угодно изоморфны графов, и то, что присылает ему Алиса, это просто один из них. </p>
<p>Случай с первым вопросом не столь очевиден. В ответ на первый вопрос Боб получает гамильтонов цикл в графе, изоморфном графу <i>G</i>. На первый взгляд может показаться, что это дает Бобу какую-то информацию. Однако это не так. Заметим, что если в <i>G</i> есть гамильтонов цикл, то при некоторой нумерации вершин существует изоморфный граф, который задается матрицей смежности вида </p>
<p><img src="img/image554.png" height="142" width="262">              (6.1)</p>
<p>где * означает неопределенность в наличии или отсутствии ребра. Т.е. при такой нумерации гамильтонов цикл проходит через вершины в порядке возрастания номеров. Изменяя нумерацию вершин, Боб может получать из (б.1) всевозможные изоморфные матрицы. Когда Алиса, отвечая на его первый вопрос, открывает гамильтонов цикл, Боб видит как раз одну из таких матриц. </p>
<p>Таким образом, Боб не получает от Алисы никакой информации, которую он не мог бы получить сам. </p>
<p>Рассмотрим пример, иллюстрирующий все основные этапы описанного протокола. </p>
<p>П р и м е р б.2. Возьмем в качестве основного граф G, изображенный на рис. б.1. Его матрица смежности имеет вид </p>
<p><img src="img/image555.png" height="228" width="417"> </p>
<p>В матрице с помощью <img src="img/image556.png" height="22" width="25"> показан гамильтонов цикл. Алиса выбирает некоторую случайную нумерацию вершин, скажем, 7, 4, 5, 3, 1, 2, 8, б, и получает изоморфный граф </p>
<p><img src="img/image557.png" height="228" width="409"> </p>
<p>Для шифрования матрицы будем использовать систему RSA с параметрами <i>N = 55</i>, <i>d = 3</i>. Вначале закодируем матрицу <i>Н</i>. В рамках данного примера просто припишем слева к каждому элементу матрицы выбираемую случайно с равными вероятностями цифру из множества {1, 2, 3, 4, 5}: </p>
<p><img src="img/image558.png" height="190" width="395"> </p>
<p>Теперь мы шифруем матрицу <img src="img/image553.png" height="19" width="17">, возводя каждый ее элемент в куб по модулю 55:</p>
<p><img src="img/image559.png" height="180" width="388"> </p>
<p> (При внимательном просмотре матрицы <i>F</i> может показаться, что использованный нами шифр плохо скрывает исходную матрицу <i>Н</i>. Это объясняется тем, что, во-первых, модуль 55 слишком мал и, во-вторых, в матрице <sup><img src="img/image553.png" height="19" width="17"></sup> много чисел, не взаимно просты с модулем. Для реальных систем RSA, где <i>N</i> большое число, такая ситуация практически исключена.) </p>
<p>Боб получает матрицу <i>F</i> и задает один из двух вопросов. Если он просит доказать изоморфизм графов, то Алиса просто посылает ему кодированную матрицу <sup><img src="img/image553.png" height="19" width="17"></sup> и использованную нумерацию 7, 4, 5, 3, 1, 2, 8, б. Боб проверяет соответствие матрицы <sup><img src="img/image553.png" height="19" width="17"></sup> матрице <i>F</i>, т.е.выполнение равенств <i>50<sup>3</sup> mod 55 = 40</i>, <i>20<sup>3</sup> mod 55 = 25</i> и т.д. Из матрицы <sup><img src="img/image553.png" height="19" width="17"></sup> Боб получает граф <i>Н</i> (просто отбросив старшую десятичную цифру). Затем он переставляет вершины графа <i>G</i> в соответствии с полученной нумерацией, как это делала Алиса, и убеждается в том, что <i>Н</i> и <i>G</i> один и тот же граф. </p>
<p>Если Боб просит показать ему гамильтонов цикл, то Алиса посылает ему соответствующий список (закодированных) ребер графа <i>Н: (1, 5, 21), (5, 7, 41), (7, б, 21), ... , (3, 1, 41)</i>. Каждый элемент содержит номера вершин и код ребра. Боб проверяет соответствие указанных в списке ребер матрице <i>F</i>, например, <i>21<sub>3</sub> mod 55 = 21 = F<sub>1,5</sub>, 41<sub>3</sub> mod 55 = 06 = F<sub>5,7</sub></i> и т.д. Затем он убеждается, что указанный в списке путь проходит через все вершины графа по одному разу. </p>
<br>
<a name=2 class="anchor"></a>
<h3>6.2. Электронные деньги</h3>
<p>Во многих странах люди оплачивают покупки при помощи электронных карточек, заказывают авиабилеты через Интернет, покупают самые разнообразные товары в Интернет-магазинах. Сведения о покупках накапливаются в магазинах и банках. Поэтому появилась новая проблема, иногда называемая «проблема Большого Брата».</p>
<p> Суть проблемы состоит в том, что исчезает анонимность процесса покупки, т.е. информация о покупках любого человека может стать известной третьим лицам и использоваться против него. Например, сведения о покупке билета на поезд или самолет могут представлять интерес для преступников, информация о закупках алкогольных напитков политическим деятелем может быть использована против него его противниками и т.д., и т.п.</p>
<p>Поэтому возникла идея разработать такие схемы электронных платежей, которые сохраняли бы анонимность покупателя в той же степени, что и при расчете наличными деньгами. Такие протоколы называются электронными или цифровыми деньгами (digital cache), что подчеркивает их основное свойство они обеспечивают ту же степень анонимности, что и обычные деньги. Некоторые схемы уже используются в реальной жизни. Описываемая ниже схема была предложена Д. Чаумом (David Chaum), см. [2, 22]. </p>
<p>Мы рассмотрим две «плохие» схемы, а затем «хорошую», чтобы было легче понять суть метода. </p>
<p>Вначале дадим более точную постановку задачи. Имеются три участника: банк, покупатель и магазин. Покупатель и магазин имеют соответствующие счета в банке, и покупатель хочет купить некоторый товар в магазине. Покупка осуществляется в виде трехступенчатого процесса: </p>
<p class=punkt>1) покупатель снимает нужную сумму со своего счета в банке; </p>
<p class=punkt>2) покупатель «пересылает» деньги в магазин; </p>
<p class=punkt>3) магазин сообщает об этом в банк, соответствующая сумма денег зачисляется на счет магазина, а покупатель забирает товар(или последний ему доставляется). </p>
<p>Наша цель разработать такую схему, чтобы </p>
<p class=punkt>• она была надежна;</p>
<p class=punkt>• чтобы банк не знал, кто купил товар, т.е. была сохранена ано-нимность обычных денег. </p>
<p>Опишем первую «плохую» схему (она базируется на RSA). Банк имеет следующую информацию: секретные числа <i>Р</i>, <i>Q</i>, с и открытые </p>
<p><img src="img/image560.png" height="64" width="262">              (6.2)</p>
<p>Допустим, покупатель решил израсходовать некоторую заранее оговоренную с банком сумму (например, 100$). (Мы сначала рассмотрим случай, когда может использоваться «банкнота» только одного номинала (скажем, 100$).) Покупатель высылает в банк число <i>n</i>, которое будет номером банкноты (обычно требуется, чтобы генерировалось случайное число в промежутке <i>[2, N — 1]</i>) . </p>
<p>Банк вычисляет число </p>
<p><img src="img/image561.png" height="20" width="137">              (6.3)</p>
<p>и формирует банкноту <img src="img/image562.png" height="20" width="50">, которую возвращает покупателю, предварительно уменьшив его счет на 100$. Параметр <i>s</i> в банкноте это подпись банка. Никто не может подделать подпись, так как число <i>с</i> секретно. </p>
<p>Покупатель предъявляет банкноту <img src="img/image562.png" height="20" width="50"> в магазине, чтобы купить товар. Магазин отправляет эту банкноту в банк для проверки. Прежде всего, банк проверяет правильность подписи (эту проверку мог бы сделать и магазин, используя открытые ключи банка). Но кроме этого банк хранит все номера возвратившихся к нему банкнот и проверяет, нет ли числа <i>n</i> в этом списке. Если <i>n</i> есть в списке, то платеж не принимается (кто-то пытается использовать банкноту повторно), и банк сообщает об этом магазину. Если же все проверки прошли успешно, то банк добавляет 100$ на счет магазина, а магазин отпускает товар покупателю.</p>
<p>Недостаток этой схемы отсутствует анонимность. Банк, а также все, кто имеет доступ к открытым линиям связи, могут запомнить, какому покупателю соответствует число <i>n</i>, и тем самым выяснить, кто купил товар. </p>
<p>Рассмотрим вторую «плохую» схему, которая уже обеспечивает анонимность. Эта схема базируется на так называемой «слепой подписи».</p>
<p> Снова покупатель хочет купить товар. Он генерирует число <i>n</i>, которое теперь не будет посылаться в банк. Затем он генерирует случайное число <i>r</i>, взаимно простое с <i>N</i>, и вычисляет число</p>
<p><img src="img/image563.png" height="30" width="187">              (6.4)</p>
<p>Число <img src="img/image564.png" height="19" width="19">  покупатель отправляет в банк.</p>
<p>Банк вычисляет число </p>
<p><img src="img/image565.png" height="27" width="156">              (6.5)</p>
<p>и отправляет <img src="img/image566.png" height="18" width="20"> обратно покупателю (не забыв при этом снять 100$ с его счета). </p>
<p>Покупатель находит число <i>r<sup>-1</sup> mod N</i> и вычисляет </p>
<p><img src="img/image567.png" height="23" width="185">              (6.6)</p>
<p>Заметим, что с учетом соотношений (б.5), (б.4) и (б.2) имеем </p>
<p><img src="img/image568.png" height="30" width="521"></p>
<p>т.е. мы получили подпись банка к <i>n</i> (см. (б.3)), но самого числа <i>n</i> ни банк, ни кто либо другой не видел. Вычисление (б.5) называется «слепой подписью», так как реальное сообщение (<i>n</i>) подписывающий не видит и узнать не может.</p>
<p> Таким образом, покупатель имеет число <i>n</i>, которое никому не известно и никогда не передавалось по каналам связи, и подпись банка <i>s</i>, совпадающую с вычисленной по (б.3). Покупатель формирует банкноту <img src="img/image562.png" height="20" width="50"> и действует так же, как в первой «плохой» схеме. Но теперь никто не знает, кому соответствует эта банкнота, т.е. она стала анонимной, как обычная бумажная банкнота.</p>
<p> Действия магазина и банка после предъявления покупателем банкноты <img src="img/image562.png" height="20" width="50"> ничем не отличаются от действий, описанных в первой схеме. </p>
<p>Почему же данная схема плохая? Она имеет следующий недостаток: можно сфабриковать фальшивую банкноту, если известны хотя бы две настоящие. Делается это так. Путь злоумышленник (будь то покупатель или магазин) имеет две настоящие банкноты <img src="img/image569.png" height="19" width="66"> и <img src="img/image570.png" height="21" width="63">. Тогда он легко сможет изготовить фальшивую банкноту <img src="img/image571.png" height="21" width="65">, вычислив числа </p>
<p><img src="img/image572.png" height="50" width="174"></p>
<p>Действительно, </p>
<p><img src="img/image573.png" height="26" width="348">              (6.7)</p>
<p>т.е. <i>s<sub>3</sub></i> является правильной подписью для <i>n<sub>3</sub></i>, и у банка нет никаких оснований, чтобы не принять эту фальшивую банкноту (он просто не сможет отличить ее от подлинной). Это так называемое «мультипликативное свойство» системы RSA. </p>
<p>Опишем, наконец, «хорошую» схему, в которой устранены все недостатки первых двух. В одном варианте такой схемы используется некоторая односторонняя функция </p>
<p><img src="img/image574.png" height="26" width="249"></p>
<p>(<i>f</i> вычисляется легко, а обратная к ней функция <i>f<sup>-1</sup></i> очень трудно). Функция <i>f</i> не секретна и известна всем (покупателю, банку и магазину). </p>
<p>Банкнота теперь определяется как пара чисел <img src="img/image575.png" height="20" width="56">, где </p>
<p><img src="img/image576.png" height="27" width="182"></p>
<p>т.е. подписывается не <i>n</i>, а значение <i>f (n)</i>. </p>
<p>Покупатель генерирует <i>n</i> (никому его не показывая), вычисляет <i>f (n)</i>, подписывает в банке при помощи «слепой подписи» число <i>f (n)</i> и формирует банкноту <img src="img/image575.png" height="20" width="56">. Эта банкнота обладает всеми хорошими свойствами, как и во второй схеме, в то же время подделать такую банкноту невозможно, так как невозможно вычислить <i>f<sup> -1</sup></i>. Для проверки подписи (т.е. подлинности банкноты) нужно вычислить <i>f (n)</i> и убедиться, что </p>
<p><img src="img/image577.png" height="39" width="163"></p>
<p>Заметим, что при выборе односторонней функции нужно проявлять осторожность. Например, функция <img src="img/image578.png" height="21" width="147">, которая действительно является односторонней, не годится для рассматриваемого протокола. Читатель может проверить, что банкноты, созданные с использованием такой функции, будут по-прежнему обладать мультипликативным свойством (б.7). На практике в качестве <i>f (n)</i> обычно используются криптографичесие хеш-функции, описываемые в главе 4.</p>
<p>Все остальные действия магазина и банка остаются такими же, как и в ранее описанных схемах. </p>
<p>Есть еще один, более простой, способ борьбы с мультипликативным свойством системы RSA - внесение избыточности в сообщение. Допустим, что длина модуля <i>N</i> - 1024 бита. Такой же может быть и длина числа <i>n</i>. Будем записывать (случайно выбираемый) номер банкноты только в младшие 512 бит <i>n</i>, а в старшие 512 бит <i>n</i> запишем некоторое фиксированное число. Это фиксированное число может нести полезную информацию, такую, как номинал банкноты и наименование банка (с помощью 512 бит можно представить строку из б4 символов ASCII). Теперь банк при предъявлении ему банкноты будет обязательно проверять наличие фиксированного заголовка в параметре <i>n</i> и отвергать банкноту в случае его отсутствия. Вероятность того, что при перемножении двух чисел по модулю <i>N</i> результат совпадет с ними в 512 битах пренебрежимо мала. Поэтому получить фальшивую банкноту по формуле (б.7) не удастся.</p>
<p>П р и м е р б.3. Пусть в качестве секретных параметров банка выбраны числа <i>Р = 17</i>, <i>Q = 7</i>, <i>с = 77</i>. Соответствующие им открытые параметры будут <i>N = 119</i>, <i>d = 5</i>. Для исключения возможности подделки банкнот их допустимыми номерами считаются только числа, состоящие из двух одинаковых десятичны цифр, например, 11, 77, 99. </p>
<p>Когда покупатель хочет получить банкноту, он вначале случайным образом выбирает ее номер (из числа допустимы). Предположим, он выбрал <i>n = 33</i>. Затем он находит случайное число <i>r</i>, взаимнопростое со 119. Допустим, <i>r = 67</i>, <i><img src="img/image513.png" height="22" width="32">(67, 119) = 1</i>. Далее, покупатель вычисляет </p>
<p><img src="img/image579.png" height="31" width="423"></p>
<p>Именно число 52 он посылает в банк. </p>
<p>Банк списывает со счета покупателя 100$ и отправляет ему число </p>
<p><img src="img/image580.png" height="35" width="216"></p>
<p>Покупатель вычисляет <i>r<sup>-1</sup> = 67<sup>-1</sup> mod 119 = 16</i> и <i>s = 103 <span style='font-size:8.0pt;line-height:150%'>•</span> 16 mod 119 = 101</i> и получает платежеспособную банкноту </p>
<p><img src="img/image581.png" height="31" width="160"></p>
<p>Эту банкноту он приносит (или посылает) в магазин, чтобы купить товар.</p>
<p>Магазин предъявляет банкноту в банк. Банк делает следующие проверки: </p>
<p class=punkt>1) номер банкноты (<i>n = 33</i>) состоит из двух одинаковых десятичных цифр (т.е. содержит требуемую избыточность); </p>
<p class=punkt>2) ранее банкнота с таким номером не предъявлялась; </p>
<p class=punkt>3) подпись банка верна, т.е. <i>33<sup>5</sup> mod 119 = 101</i>.</p>
<p>Так как все проверки прошли успешно, банк зачисляет 100$ (это фиксированный номинал банкноты) на счет магазина, о чем ему и сообщает. Магазин отпускает товар покупателю. </p>
<p>В завершение разберем еще две проблемы, возникающие в связи с рассмотренной схемой электронных денег. </p>
<p>В представленной схеме независимо действующие покупатели или даже один покупатель, который не помнит номеров ранее использованных им банкнот, могут случайно сгенерировать две или более банкноты с одинаковыми номерами. По условиям протокола банк примет к оплате только одну из таких банкнот (ту, которая будет предъявлена первой). Однако примем во внимание размеры чисел, используемых в протоколе. Если номер банкноты число длиной 512 бит и покупатели генерируют его действительно случайным образом, то вероятность получения когда либо двух одинаковых номеров пренебрежимо мала. </p>
<p>Вторая проблема состоит в том, что в рассмотренной схеме используются только банкноты одного фиксированного номинала, что, конечно, неудобно для покупателя. Решение проблемы использования банкнот разного номинала возможно следующим образом. Банк заводит несколько пар (<i>с<sub>i</sub></i>, <i>d<sub>i</sub></i>), обладающих свойством (б.2), и объявляет, что <i>d<sub>1</sub></i> соответствует, например, 1000 руб., <i>d<sub>2</sub></i> - 500 руб. и т.д. Когда покупатель запрашивает слепую подпись в банке, он дополнительно сообщает, какого номинала банкноту он хочет получить. Банк снимает с его счета сумму, равную указанному номиналу, и формирует подпись, используя соответствующее секретное число <i>с<sub>i</sub></i>. Когда впоследствии банк получает подписанную банкноту, он использует для проверки подписи по очереди числа <i>d<sub>1</sub></i>, <i>d<sub>2</sub></i> и т.д. Если подпись оказалась верна для какого-то <i>d<sub>i</sub></i>, то принимается банкнота <i>i</i>-го номинала. В случае, когда параметр <i>n</i> банкноты содержит фиксированный заголовок с указанием ее номинала, задача проверки подписи облегчается банк сразу использует нужный ключ <i>d<sub>i</sub></i>.</p>
<br>
<a name=3 class="anchor"></a>
<h3>6.3. Взаимная идентификация с установлением ключа</h3>
<p>В данном разделе мы рассмотрим криптографически стойкий протокол, в результате реализации которого два абонента сети <i>А</i> и <i>В</i> взаимно идентифицируют друг друга (т.е. <i>А</i> убеждается в том, что взаимодействует с <i>В</i>, а <i>В</i> в том, что он взаимодействует с <i>А</i>) и формируют общий секретный ключ, который может использоваться в дальнейшем для шифрования передаваемых ими сообщений. В реальной жизни в качестве <i>А</i> и <i>В</i> могут выступать пользователь и компьютерная система или две различные компьютерные системы суть описываемого ниже протокола от этого не меняется. </p>
<p>В процессе описания мы рассматриваем различные, все более изощренные типы атак и средства защиты от них. Так мы уже рассматривали ранее (см. разд. 2.1 и 2.2) подходы к решению задачи идентификации и установления ключа. Однако мы исходили из того, что противник может только прослушивать информацию, передаваемую по открытому каналу. Но в современных сетях передачи данных, например в Интернете, информация от одного пользователя передается другому через множество промежуточных узлов (маршрутизаторы, шлюзы, почтовые серверы и т.д.), не контролируемых этими пользователями. В результате противник, обосновавшийся на одном таком промежуточном узле, может не только прослушивать информацию, т.е. играть чисто пассивную роль, но и осуществлять активные воздействия, например, изменять, добавлять или удалять сообщения. </p>
<p>Разберем, например, типичную атаку на систему Диффи-Хеллмана в сети связи с активным противником. Алиса выбирает свое секретное число <i>Х<sub>А</sub></i> и посылает Бобу <sup><img src="img/image582.png" height="22" width="37"></sup>. Боб выбирает свое секретное число <i>Х<sub>B</sub></i> и посылает Алисе <sup><img src="img/image583.png" height="24" width="36"></sup>. Однако Ева перехватывает эти числа и посылает вместо них и Алисе, и Бобу <sup><img src="img/image584.png" height="25" width="35"></sup>, где <i>Х<sub>Е</sub></i> ее число. Все эти числа выглядят как совершенно случайные, так что ни Алиса, ни Боб ничего не подозревают. В результате Алиса формирует ключ <img src="img/image585.png" height="24" width="110"> а Боб ключ <img src="img/image586.png" height="22" width="114">. Оба этих ключа могут быть легко вычислены и Евой. Теперь, когда Алиса посылает Бобу сообщение, зашифрованное с ключом <i>К<sub>А</sub></i>, Ева расшифровывает его, снова шифрует с ключом <i>К<sub>В</sub></i> и отправляет Бобу. Аналогично Ева действует и при передаче сообщений в обратном направлении. Боб и Алиса взаимодействуют, как им кажется, в защищенном режиме, но на самом деле Ева читает все их сообщения. </p>
<p>Такая атака становится невозможной, если Алиса и Боб не передают открытые ключи (в системе Диффи-Хеллмана это <img src="img/image587.png" height="24" width="83"> и <img src="img/image588.png" height="24" width="89">) по каналу связи, а выбирают их из некоторой таблицы или справочника, который был получен ими ранее из «надежного» источника (как это предполагалось в разд. 2.2).</p>
<p> Вообще, большинство криптосистем с открытыми ключами требуют наличия некоторой организационной структуры, занимающейся сертификацией открыты ключей. Такая структура может, например, выглядеть следующим образом. В сети, которой принадлежат Алиса и Боб, имеется «честный» пользователь Трент (абонент <i>Т</i>), который заинтересован только в том, чтобы сеть работала надежно (скорее всего это не человек, а хорошо охраняемый компьютер, работающий по жестко заложенной программе). Трент располагает какой-либо надежной криптосистемой (например, RSA с длиной модуля порядка 10000 бит) с соответствующими открытыми ключами и выполняет всего две функции: </p>
<p class=punkt>1) он добавляет в свою базу данных информацию об открытом ключе пользователя, присылаемую в виде сообщения, зашифрованного с использованием открытого ключа Трента; </p>
<p class=punkt>2) он сообщает информацию о чьем-либо открытом ключе, снабженную своей подписью. </p>
<p>Открытые ключи Трента доводятся до сведения всех пользователей каким-либо способом, исключающим вмешательство Евы. Например, они публикуются в виде рекламного сообщения в газете. Теперь Алиса, вычислив свой открытый ключ, формирует сообщение из своего имени и этого ключа, шифрует его с использованием открытого ключа Трента и посылает Тренту (никто кроме Трента не может расшифровать это сообщение). Боб, когда ему нужен открытый ключ Алисы, посылает запрос Тренту, и Трент присылает ему подписанный ключ Алисы (никто не может подделать подпись Трента). Боб проверяет подпись Трента, используя его открытый ключ, и принимает ключ Алисы как достоверный. Таким образом, каждый пользователь сети получает достоверную информацию об открыты ключах других пользователей, и Ева никак не может вмешаться в этот процесс. </p>
<p>Итак, если Алиса и Боб пользуются достоверными открытыми ключами, то схема диффи-Хеллмана решает задачу установления секретного ключа. Однако она непосредственно не обеспечивает идентификацию пользователей. Действительно, если вместо Алисы выступала Ева, которая не знает секретного ключа Алисы, то у них с Бобом будут сформированы различные секретные ключи, но это может выясниться только позднее, на стадии обмена данными, когда Боб, например, не сможет расшифровать переданное ему сообщение или обнаружит, что «Алиса» не понимает того, что он посылает ей. Часто требуется обеспечить явную идентификацию, чтобы по завершении протокола стороны точно знали, кто есть кто. </p>
<p>У схемы диффи-Хеллмана есть и другой недостаток: секретный ключ, который формируют Алиса и Боб, будет всегда один и тот же, пока они не поменяют открытые ключи. Но смена открытых ключей это относительно долгий процесс (например, обычно требуется оповестить всех пользователей сети об изменении какого-то открытого ключа, чтобы они могли скорректировать информацию в своих справочниках). Хотелось бы иметь протокол, обеспечивающий оперативное создание каждый раз различных, случайно выбираемых секретных ключей.</p>
<p>Решение состоит в использовании какого-либо шифра с открытым ключом для передачи секретных ключей. Обозначим шифр сообщения <i>х</i>, построенный с использованием открытого ключа пользователя <i>А</i>, через <i>Р<sub>А</sub>(х)</i>. (Например, <i>Р<sub>А</sub>(х)</i> может быть шифром RSA или шифром Эль-Гамаля. В случае RSA <img src="img/image589.png" height="23" width="178">, где пара чисел <i>d<sub>А</sub></i> и <i>N<sub>А</sub></i> представляет собой открытый ключ пользователя <i>А</i>.) Все, кто знает открытый ключ <i>А</i>, могут вычислить <i>Р<sub>А</sub>(х)</i> для сообщения <i>х</i>. В то же время только <i>А</i>, знающий соответствующий секретный ключ, может получить <i>х</i> из <i>у = Р<sub>А</sub>(х)</i>. Аналогично (<i>Р<sub>В</sub>(х)</i>) будем обозначать шифр, построенный с помощью открытого ключа пользователя <i>В</i>. Символом ||, как и ранее, будем обозначать конкатенацию чисел. Мы опишем протокол поэтапно, чтобы не «утопить» читателя в деталях. </p>
<p>Напомним, что мы решаем следующую задачу: Алиса и Боб хотят взаимно идентифицировать друг-друга и установить общий секретный ключ. Рассмотрим вначале следующий (плохой) протокол, состоящий из трех шагов, чтобы обсудить несколько важных вопросов.</p>
<p><b>Шаг 1.</b> Алиса придумывает секретный ключ <i>k<sub>1</sub></i>, шифрует его, используя открытый ключ Боба, и посылает Бобу: </p>
<p><img src="img/image590.png" height="29" width="178">              (6.8)</p>
<p><b>Шаг 2.</b> Боб расшифровывает <i>k<sub>1</sub></i>, снова шифрует его, используя открытый ключ Алисы, и посылает Алисе:</p>
<p><img src="img/image591.png" height="30" width="178">              (6.9)</p>
<p><b>Шаг З.</b> Алиса расшифровывает <i>k<sub>1</sub></i> и сравнивает его с тем, который она придумала на шаге 1. </p>
<p>Что мы имеем в результате реализации этого протокола? Во-первых, Алиса и Боб получили общий секретный ключ <i>k<sub>1</sub></i>, неизвестный Еве (Ева не может расшифровать ни <i>Р<sub>В</sub> (k<sub>1</sub>)</i>, ни <i>Р<sub>A</sub> (k<sub>1</sub>)</i>). Во-вторых, Алиса получила криптографически стойкую идентификацию Боба, так как никто кроме него не смог бы расшифровать <i>k<sub>1</sub></i>. Очевидно, что в данном протоколе Боб не получает никакой идентификации Алисы (сообщение (б.8) мог послать кто угодно). Он мог бы провести симметричный протокол со своей стороны: </p>
<p><img src="img/image592.png" height="30" width="191">              (6.10)</p>
<p><img src="img/image592.png" height="27" width="184">              (6.11)</p>
<p>и получить такую идентификацию. Проблема, однако, здесь состоит в логической независимости двух протоколов, в результате чего нет гарантии, что оба протокола проводятся одними и теми же участниками. </p>
<p>Но есть и более тонкая проблема. Алиса может использовать описанный протокол для вскрытия криптосистемы Боба! Делается это так. Допустим, Алиса перехватила какое-то сообщение <i>у</i>, предназначенное для Боба, т. е. <i>у = Р<sub>в</sub> (х)</i>. Она притворяется, что хочет войти в систему Боба, и запускает протокол (б.8), (б.9). Однако вместо <i>Р<sub>В</sub> (k<sub>1</sub>)</i> она передает Бобу сообщение <i>у</i>. Так как <i>k<sub>1</sub></i> произвольно выбранное число, то Боб не может ничего заподозрить. Он честно выполняет свой шаг в протоколе и расшифровывает для Алисы <i>х</i> ! </p>
<p>Урок, который следует отсюда извлечь, следующий: никогда ни для кого не следует расшифровывать случайные числа. Это может повредить вашей безопасности. Средство борьбы с такой «опасной» случайностью внесение избыточности в сообщения, например, введение какого-либо элемента, известного получателю и ожидаемого им. В частности, в (б.8) Алиса могла бы послать свое имя. Она могла бы построить сообщение, отведя 512 бит под случайное число <i>k<sub>1</sub></i> и 512 бит под свое имя, адрес, фрагмент открытого ключа и другую легко проверяемую информацию (будем обозначать все это вместе через <sup><img src="img/image594.png" height="23" width="22"></sup>), и послать Бобу <img src="img/image595.png" height="24" width="80">. В этом случае Боб не стал бы посылать Алисе сообщение <i>х</i>, так как его соответствующие 512 бит наверняка не содержали бы <sup><img src="img/image594.png" height="23" width="22"></sup>.</p>
<p>Все вышеизложенное приводит нас к следующему протоколу Нид-хама—Шредера (Needham, Schroeder, см., например, [23]), который полностью решает поставленную в начале раздела задачу. </p>
<p><b>Шаг 1.</b> Алиса выбирает случайное число <i>k<sub>1</sub></i>, объединяет его со своей открытой информацией <sup><img src="img/image594.png" height="23" width="22"></sup> и посылает Бобу </p>
<p><img src="img/image596.png" height="28" width="200">              (6.12)</p>
<p><b>Шаг 2.</b> Боб расшифровывает (6.12) и убеждается в том, что полученное сообщение содержит открытую информацию Алисы <sup><img src="img/image594.png" height="23" width="22"></sup>. Затем он выбирает случайное число <i>k<sub>2</sub></i>, объединяет его с <i>k<sub>1</sub></i> и посылает Алисе </p>
<p><img src="img/image597.png" height="32" width="209">              (6.13)</p>
<p><b>Шаг З.</b> Алиса расшифровывает (6.13) и убеждается в том, что полученное сообщение содержит <i>k<sub>1</sub></i>. Это является для нее надежным признаком идентификации Боба, так как никто другой не мог бы извлечь <i>k<sub>1</sub></i> из (6.12). Алиса посылает Бобу </p>
<p><img src="img/image598.png" height="35" width="183">              (6.14)</p>
<p><b>Шаг 4.</b> Боб расшифровывает (6.14) и убеждается в том, что он получил <i>k<sub>2</sub></i>. Это является для него надежным признаком идентификации Алисы, так как никто другой не мог бы извлечь <i>k<sub>2</sub></i> из (6.13). </p>
<p>Теперь Алиса и Боб могут сформировать из <i>k<sub>1</sub></i>, <i>k<sub>2</sub></i> общий ключ, например, <i>k = k<sub>1</sub> <img src="img/image599.png" height="16" width="20"> k<sub>2</sub></i>, где <img src="img/image599.png" height="16" width="20"> побитовая сумма по модулю 2, или использовать <i>k<sub>1</sub></i> и <i>k<sub>2</sub></i> по-отдельности для шифрования входящих и исходящих сообщений.</p>
<p>П р и м е р б.4. Пусть в некоторой сети используется шифр Эль-Гамаля с открытыми параметрами <i>р = 107</i>, <i>g = 2</i>. Пользователи <i>А</i> И <i>В</i> имеют открытые ключи <i>d<sub>A</sub> = 58</i>, <i>d<sub>B</sub> = 28</i>, Которым соответствуют секретные <i>С<sub>А</sub> = 33</i>, <i>С<sub>В</sub> = 45</i>. Рассмотрим реализацию протокола Нидхама-Шредера для взаимной идентификации пользователей <i>А</i> и <i>В</i> и установления общего секретного ключа. Учитывая небольшую величину модуля <i>р</i> в нашем примере, будем использовать в качестве идентификаторов пользователей одну цифру в десятичной записи, пусть <img src="img/image601.png" height="21" width="17"> = 1, <img src="img/image600.png" height="20" width="17"> = 2, и секретный ключ будем получать также в виде одной десятичной цифры. </p>
<p>На первом шаге протокола А выбирает секретный ключ, пусть <i>k<sub>1</sub></i> = 3, и формирует сообщение <img src="img/image602.png" height="24" width="139">. Это сообщение шифруется шифром Эль-Гамаля на открытом ключе пользователя В: </p><p><img src="img/image603.png" height="51" width="380"></p>
<p>Пара чисел (26, 47) и есть тот шифротекст, который необходимо послать <i>В</i>. В использованных при описании протокола обозначениях <img src="img/image604.png" height="26" width="78"> = (26,47) и </p>
<p><img src="img/image605.png" height="29" width="182"></p>
<p>На втором шаге протокола В расшифровывает (26, 47), используя свой секретный ключ: </p>
<p><img src="img/image606.png" height="25" width="436"></p>
<p><i>В</i> убеждается, что младшая цифра содержит идентификационный номер пользователя <i>А</i> и извлекает <i>k<sub>1</sub> = 3</i>. Затем он выбирает свое секретное число, пусть <i>k<sub>2</sub> = 7</i>, формирует сообщение <i>m =<img src="img/image607.png" height="22" width="50">= 37</i> и шифрует его на открытом ключе <i>А</i>: </p>
<p><img src="img/image608.png" height="59" width="383"></p>
<p>Пара чисел (63, 18) - это то, что нужно послать <i>А</i>. Т.е. <img src="img/image609.png" height="21" width="83"> = (63, 18) и </p>
<p><img src="img/image610.png" height="30" width="191"></p>
<p>На третьем шаге <i>А</i> расшифровывает (63, 18) : </p>
<p><img src="img/image611.png" height="30" width="440"></p>
<p><i>А</i> убеждается в том, что старшая цифра содержит <i>k<sub>1</sub> = 3</i> и извлекает <i>k<sub>2</sub> = 7</i>. Теперь <i>А</i> шифрует <i>k<sub>2</sub></i> для <i>В</i> : </p>
<p><img src="img/image612.png" height="60" width="386"></p>
<p>и посылает <i>В</i> </p>
<p><img src="img/image613.png" height="33" width="196"></p>
<p>На четвертом шаге <i>В</i> расшифровывает (82, 49) : </p>
<p><img src="img/image614.png" height="24" width="418"></p>
<p><i>В</i> убеждается в том, что он получил свое число <i>k<sub>2</sub> = 7</i>. </p>
<p>Теперь <i>А</i> и <i>В</i> могут сформировать общий ключ по заранее оговоренной схеме, например, </p>
<p><img src="img/image615.png" height="25" width="427"></p>
<br>
<a name=4 class="anchor"></a>
<h3>Задачи и упражнения</h3>
<p><b>6.1.</b> В системе электронных денег выбраны секретные параметры банка <i>Р = 17</i>, <i>Q = 7</i>, <i>с = 77</i>, а соответствующие им открытые параметры <i>N = 119</i>, <i>d = 5</i>. Сформировать электронные банкноты со следующими номерами:</p>
<p><img src="img/image616.png" height="145" width="216"></p>
<p><a href="lec6.htm#6.1" class=punkt>См. ответ.</a></p>
<br>
<a name=5 class="anchor"></a>
<h3>Ответы к задачам и упражнениям</h3>
<a name=1.1 class="anchor"></a>
<p><b>1.1.</b> а. <i>k = 17</i>.       б. <i>k = 27</i>. </p><br>
<a name=1.2 class="anchor"></a>
<p><b>1.2.</b> а. ПРИВЕТ (<i>k = 5</i>).       б. ВЕСНА (<i>k = 20</i>).</p><br>
<a name=2.1 class="anchor"></a>
<p><b>2.1.</b> а. 5 = 5, 16 = 6, 27 = 7, −4 = 6, −13 = −3 = 7, 3 + 8 = 1, 
 3 − 8 = 5, 3 · 8 = 4, 3 · 8 · 5 = 4 · 5 = 0 (mod 10).</p>
<p>       b. 5 = 5, 16 = 5, 27 = 5, −4 = 7, −13 = −2 = 9, 3 + 8 = 0, 3 − 8 = 6, 
 3 · 8 = 2, 3 · 8 · 5 = 2 · 5 = 10 (mod 11).</p><br>
<a name=2.2 class="anchor"></a>
<p><b>2.2.</b> 2<sup>8</sup> mod 10 = 6, 3<sup>7</sup> mod 10 = 7, 7<sup>19</sup> mod 100 = 43, 7<sup>57</sup> mod 100 = 7.</p>
<br>
<a name=2.3 class="anchor"></a>
<p><b>2.3.</b> 108 = 2 · 2 · 3 · 3 · 3, 77 = 7 · 11, 65 = 5 · 13, 30 = 3 · 3 · 5, 159 = 3 · 53.</p>
<br>
<a name=2.4 class="anchor"></a>
<p><b>2.4.</b> пары (25,12) и (40, 27) взаимно просты, другие нет (числа (25, 15) делятся на 5, (13, 39) делятся на 13). </p><br>
<a name=2.5 class="anchor"></a>
<p><b>2.5.</b> <img src="img/image617.png" height="22" width="23">(14) = 6, <img src="img/image617.png" height="22" width="23">(20) = 8.</p>
<br>
<a name=2.6 class="anchor"></a>
<p><b>2.6.</b> <img src="img/image617.png" height="22" width="23">(53) = 52, <img src="img/image617.png" height="22" width="23">(21) = <img src="img/image617.png" height="22" width="23">(7) · <img src="img/image617.png" height="22" width="23">(3) = 6 · 2 = 12, <img src="img/image617.png" height="22" width="23">(159) = 2 · 52 = 104.</p>
<br>
<a name=2.7 class="anchor"></a>
<p><b>2.7.</b> 3<sup>13</sup> mod 13 = 3 · 3<sup>12</sup> mod 13 = 3, 5<sup>22</sup> mod 11 = 5<sup>2</sup> · 5<sup>10</sup> · 5<sup>10</sup> mod 11 = 25 mod 11 = 3, 3<sup>17</sup> mod 5 = 3.</p>
<br>
<a name=2.8 class="anchor"></a>
<p><b>2.8.</b> 3<sup>9</sup> mod 20 = 3·3<sup>8</sup> mod 20 = 3, 2<sup>14</sup> mod 21 = 2<sup>2</sup> ·2<sup>12</sup> mod 21 = 4, 2<sup>107</sup> mod 159 = 2<sup>3</sup> · 2<sup>104</sup> mod 159 = 8.</p>
<br>
<a name=2.9 class="anchor"></a>
<p><b>2.9.</b> <img src="img/image513.png" height="22" width="32">(21, 12) = 3, <img src="img/image513.png" height="22" width="32">(30, 12) = 6, <img src="img/image513.png" height="22" width="32">(24, 40) = <img src="img/image513.png" height="22" width="32">(40, 24) = 8, <img src="img/image513.png" height="22" width="32">(33, 16) = 1.</p>
<br>
<a name=2.10 class="anchor"></a>
<p><b>2.10.</b>        а. x = −1, y = 2.        б. x = 1, y = −2.        в. x = 2, y = −1.        г. x = 1, y = −2.</p>
<br>
<a name=2.11 class="anchor"></a>
<p><b>2.11.</b> 3<sup>−1</sup> mod 7 = 5, 5<sup>−1</sup> mod 8 = 5, 3<sup>−1</sup> mod 53 = 18, 10<sup>−1</sup> mod 53 = 16.</p>
<br>
<a name=2.12 class="anchor"></a>
<p><b>2.12.</b> Простые числа, меньшие 100: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, б1, б7, 73, 79, 83, 89, 97. Из них числа 5, 7, 11, 23, 47, 59 и 83 соответствуют виду <i>р = 2q + 1</i>.</p>
<br>
<a name=2.13 class="anchor"></a>
<p><b>2.13.</b> При <i>р = 11</i> в качестве параметра <i>g</i> могут быть выбраны числа 2, 6, 7 и 8. </p>
<br>
<a name=2.14 class="anchor"></a>
<p><b>2.14.</b> а. <i>Y<sub>A</sub> = 20, Y<sub>B</sub> = 17, Z<sub>AB</sub> = 21.</i> <br>       б. <i>Y<sub>A</sub> = 13, Y<sub>B</sub> = 14, Z<sub>AB</sub> = 10</i>. <br>       в. <i>Y<sub>A</sub> = 21, Y<sub>B</sub> = 9, Z<sub>AB</sub> = 16</i>. <br>       г. <i>Y<sub>A</sub> = 8, Y<sub>B</sub> = 5, Z<sub>AB</sub> = 9</i>. <br>       д. <i>Y<sub>A</sub> = 6, Y<sub>B</sub> = 17, Z<sub>AB</sub> = 16</i>.</p>
<br>
<a name=2.15 class="anchor"></a>
<p><b>2.15.</b> а. <i>d<sub>A</sub> = 11, d<sub>B</sub> = 13, x<sub>1</sub> = 17, x<sub>2</sub> = 5, x<sub>3</sub> = 6, x<sub>4</sub> = 4.</i><br>       б. <i>d<sub>A</sub> = 3, d<sub>B</sub> = 19, x<sub>1</sub> = 8, x<sub>2</sub> = 12, x<sub>3</sub> = 3, x<sub>4</sub> = 6. </i><br>       в. <i>d<sub>A</sub> = 5,
d<sub>B</sub> = 11, x<sub>1</sub> = 14, x<sub>2</sub> = 10, x<sub>3</sub> = 3, x<sub>4</sub> = 10. </i><br>
       г. <i>d<sub>A</sub> = 5, d<sub>B</sub> = 15, x<sub>1</sub> = 7, x<sub>2</sub> = 21, x<sub>3</sub> = 14, x<sub>4</sub> = 17. </i><br>       д.<i> d<sub>A</sub> = 11, d<sub>B</sub> = 5, x<sub>1</sub> = 15, x<sub>2</sub> = 2, x<sub>3</sub> = 8, x<sub>4</sub> = 9.</i></p>
<br>
<a name=2.16 class="anchor"></a>
<p><b>2.16.</b> а. <i>d<sub>B</sub> = 13, r = 14, e = 12, m' = 5. </i><br>       б. <i>d<sub>B</sub> = 16, r = 9,
e = 15, m' = 10.</i> <br>       в.<i> d<sub>B</sub> = 15, r = 16, e = 14, m' = 10. </i><br>       г. <i>d<sub>B</sub> = 21,
r = 14, e = 12, m' = 5.</i> <br>       д. <i>d<sub>B</sub> = 8, r = 5, e = 5, m' = 10.</i></p>
<br>
<a name=2.17 class="anchor"></a>
<p><b>2.17.</b> а. <i>N<sub>A</sub> = 55, <img src="img/image617.png" height="22" width="23">(N<sub>A</sub>) = 40, c<sub>A</sub> = 27, e = 23, m' = 12.</i><br>
       б. <i>N<sub>A</sub> = 65, <img src="img/image617.png" height="22" width="23">(N<sub>A</sub>) = 48, c<sub>A</sub> = 29, e = 50, m' = 20.</i><br>
       в. <i>N<sub>A</sub> = 77, <img src="img/image617.png" height="22" width="23">(N<sub>A</sub>) = 60, c<sub>A</sub> = 43, e = 52, m' = 17</i>.<br>
       г. <i>N<sub>A</sub> = 91, <img src="img/image617.png" height="22" width="23">(N<sub>A</sub>) = 72,
c<sub>A</sub> = 29, e = 88, m' = 30.</i><br>
       д. <i>N<sub>A</sub> = 33, <img src="img/image617.png" height="22" width="23">(N<sub>A</sub>) = 20, c<sub>A</sub> = 7, e = 9, m' = 15.</i></p>
<br>
<a name=2.18 class="anchor"></a>
<p><b>2.18.</b><i> m = 111</i>.</p>
<br>
<a name=3.1 class="anchor"></a>
<p><b>3.1.</b> а. <img src="img/image618.png" height="15" width="15">= 1111001110.        б. <img src="img/image618.png" height="15" width="15"> = 1111110101.        в. <img src="img/image618.png" height="15" width="15"> = 0001000110.        г.
<img src="img/image618.png" height="15" width="15"> = 0101011011.        д. <img src="img/image618.png" height="15" width="15"> = 0001010001.</p>
<br>
<a name=3.2 class="anchor"></a>
<p><b>3.2.</b> а.<i> P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.002, P<sub>2</sub> <img src="img/image619.png" height="15" width="22"> 0.006, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.623, P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.051, P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.311,
P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.007.</i><br>б. <i>P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>2</sub> <img src="img/image619.png" height="15" width="22"> 0.009, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.000,
P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.892, P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.099.</i> <br>в.<i> P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>2</sub> <img src="img/image619.png" height="15" width="22"> 0.697, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.000,
P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.004, P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.299, P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.000.</i><br>г. <i>P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.003, P<sub>2</sub> <img src="img/image619.png" height="15" width="22"> 0.000,
P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.036, P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.801, P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.160.</i><br>д. <i>P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.196, P<sub>2</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.001, P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.000, P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.018, P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.785</i>.</p>
<br>
<a name=3.3 class="anchor"></a>
<p>3.3. а. <i>H <img src="img/image619.png" height="15" width="22"> 1.16, n <img src="img/image619.png" height="15" width="22"> 6.04.</i>        б.<i> H <img src="img/image619.png" height="15" width="22"> 0.52, n <img src="img/image619.png" height="15" width="22"> 2.42.</i>        в.<i> H <img src="img/image619.png" height="15" width="22"> 0.9,
n <img src="img/image619.png" height="15" width="22"> 3.76.</i>        г.<i> H <img src="img/image619.png" height="15" width="22"> 1.08, n <img src="img/image619.png" height="15" width="22"> 5.08. </i>       д. <i>H <img src="img/image619.png" height="15" width="22"> 1.16, n <img src="img/image619.png" height="15" width="22"> 6.04.</i></p>
<br>
<a name=3.4 class="anchor"></a>
<p><b>3.4.</b> а.<i> P<sub>1</sub> <img src="img/image619.png" height="15" width="22"> 0.7 ( <img src="img/image372.png" height="22" width="21"> = bcacbcacc), P<sub>2</sub> = 0, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.3 ( <img src="img/image372.png" height="22" width="21"> = acbcacbcc),
P<sub>4</sub> = 0, P<sub>5</sub> = 0, P<sub>6</sub> = 0.</i><br>б.<i> P<sub>1</sub> = 0, P<sub>2</sub> = 0, P<sub>3</sub> = 0, P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.21 ( <img src="img/image372.png" height="22" width="21"> =
bcccaccac), P<sub>5</sub> <img src="img/image619.png" height="15" width="22"> 0.20 ( <img src="img/image372.png" height="22" width="21"> = abbbcbbcb), P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.59 ( <img src="img/image372.png" height="22" width="21"> = acccbccbc).</i><br>
в.<i> P<sub>1</sub> = 0, P<sub>2</sub> = 0, P<sub>3</sub> = 0, P<sub>4</sub> = 1 ( <img src="img/image372.png" height="22" width="21"> = ccbcabccb), P<sub>5</sub> = 0,
P<sub>6</sub> = 0.</i><br> г.<i> P<sub>1</sub> = 0, P<sub>2</sub> = 0, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.000 ( <img src="img/image372.png" height="22" width="21"> = acbbbbcbb), P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 1.000
( <img src="img/image372.png" height="22" width="21"> = abccccbcc), P<sub>5</sub> = 0, P<sub>6</sub> = 0.</i><br>д. <i>P<sub>1</sub> = 0, P<sub>2</sub> = 0, P<sub>3</sub> <img src="img/image619.png" height="15" width="22"> 0.009
( <img src="img/image372.png" height="22" width="21"> = bbbcbbbcb), P<sub>4</sub> <img src="img/image619.png" height="15" width="22"> 0.970 ( <img src="img/image372.png" height="22" width="21"> = cccbcccbc), P<sub>5</sub> = 0, P<sub>6</sub> <img src="img/image619.png" height="15" width="22"> 0.021
( <img src="img/image372.png" height="22" width="21"> = cccacccac).</i></p>
<br>
<a name=5.1 class="anchor"></a>
<p><b>5.1.</b> а.<i> s</i> = 28.       б. <i>s</i> = 30.       в. <i>s</i> = 26.       г. <i>s</i> = 71.       д. <i>s</i> = 18.</p>
<br>
<a name=5.2 class="anchor"></a>
<p><b>5.2.</b> а. <img src="img/image620.png" height="23" width="12">7, 28<img src="img/image621.png" height="22" width="10"> подлинно, <img src="img/image620.png" height="23" width="12">22, 15<img src="img/image621.png" height="22" width="10"> нет, <img src="img/image620.png" height="23" width="12">16, 36<img src="img/image621.png" height="22" width="10"> подлинно.<br>
       б. <img src="img/image620.png" height="23" width="12">6, 42<img src="img/image621.png" height="22" width="10"> нет, <img src="img/image620.png" height="23" width="12">10,30<img src="img/image621.png" height="22" width="10"> да, <img src="img/image620.png" height="23" width="12">6,41<img src="img/image621.png" height="22" width="10"> да. <br>
       в. <img src="img/image620.png" height="23" width="12">13,41<img src="img/image621.png" height="22" width="10"> да, <img src="img/image620.png" height="23" width="12">11, 28<img src="img/image621.png" height="22" width="10"> нет, <img src="img/image620.png" height="23" width="12">5, 26<img src="img/image621.png" height="22" width="10"> да. <br>
       г. <img src="img/image620.png" height="23" width="12">15,71<img src="img/image621.png" height="22" width="10"> да, <img src="img/image620.png" height="23" width="12">11,46<img src="img/image621.png" height="22" width="10"> нет, <img src="img/image620.png" height="23" width="12">16,74<img src="img/image621.png" height="22" width="10"> да. <br>
       д. <img src="img/image620.png" height="23" width="12">10,14<img src="img/image621.png" height="22" width="10"> нет, <img src="img/image620.png" height="23" width="12">24,18<img src="img/image621.png" height="22" width="10"> да, <img src="img/image620.png" height="23" width="12">17,8<img src="img/image621.png" height="22" width="10"> да. </p>
<br>
<a name=5.3 class="anchor"></a>
<p><b>5.3.</b> а.<i> y = 14, r = 3, s = 8.</i>       б. <i>y = 24, r = 3, s = 5.</i>       в.<i> y = 40,
r = 9, s = 2.</i>       г. <i>y = 22, r = 9, s = 5.</i>       д.<i> y = 64, r = 7, s = 10</i>.</p>
<br>
<a name=5.4 class="anchor"></a>
<p><b>5.4.</b> а. <img src="img/image620.png" height="23" width="12">10; 4, 5<img src="img/image621.png" height="22" width="10"> нет (h<sup>−1</sup> = 10, u<sub>1</sub> = 6, u<sub>2</sub> = 4, a<sup>u<sub>1</sub></sup> = 62, y<sup>u<sub>2</sub></sup> = 25,<i>v</i> = 9 <img src="img/image622.png" height="16" width="20"> 4),
<br>        <img src="img/image620.png" height="23" width="12">10; 7, 5<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 10, u<sub>1</sub> = 6, u<sub>2</sub> = 7, a<sup>u<sub>1</sub></sup> = 62,
y<sup>u<sub>2<sub></sup> = 59, <i>v</i> = 7), 
<br>       <img src="img/image620.png" height="23" width="12">10; 3, 8<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 10, u<sub>1</sub> = 3, u<sub>2</sub> = 3, a<sup>u<sub>1</sub></sup> = 14,
y<sup>u<sub>2</sub></sup> = 64, <i>v</i> = 3). 
<br>б. <img src="img/image620.png" height="23" width="12">1; 3, 5<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 1, u<sub>1</sub> = 5, u<sub>2</sub> = 8, a<sup>u<sub>1</sub></sup> = 40,
y<sup>u<sub>2</sub></sup> = 64, <i>v</i> = 3), 
<br>       <img src="img/image620.png" height="23" width="12">1; 4, 3<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 1, u<sub>1</sub> = 3, u<sub>2</sub> = 7, a<sup>u<sub>1</sub></sup> = 14,
y<sup>u<sub>2</sub></sup> = 25, <i>v</i> = 4), 
<br>       <img src="img/image620.png" height="23" width="12">1; 4, 5<img src="img/image621.png" height="22" width="10"> нет (h<sup>−1</sup> = 1, u<sub>1</sub> = 5, u<sub>2</sub> = 7, a<sup>u<sub>1</sub></sup> = 40,
y<sup>u<sub>2</sub></sup> = 25, <i>v</i> = 7 <img src="img/image622.png" height="16" width="20"> 4). 
<br>в. <img src="img/image620.png" height="23" width="12">7; 7, 4<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 8, u<sub>1</sub> = 10, u<sub>2</sub> = 10,
a<sup>u<sub>1</sub> </sup>= 59, y<sup>u<sub>2</sub></sup> = 62, <i>v</i> = 7), 
<br>       <img src="img/image620.png" height="23" width="12">7; 9, 2<img src="img/image621.png" height="22" width="10"> нет (h<sup>−1</sup> = 8, u<sub>1</sub> = 5, u<sub>2</sub> = 5, a<sup>u<sub>1</sub></sup> = 40, y<sup>u<sub>2</sub></sup> = 14, <i>v</i> = 2 <img src="img/image622.png" height="16" width="20"> 9), 
<br>       <img src="img/image620.png" height="23" width="12">5; 9, 2<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 9, u<sub>1</sub> = 7, u<sub>2</sub> = 7,
a<sup>u<sub>1</sub></sup> = 9, y<sup>u<sub>2</sub></sup> = 22, <i>v</i> = 9). 
<br>г. <img src="img/image620.png" height="23" width="12">6; 9, 5<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 2, u<sub>1</sub> = 10, u<sub>2</sub> = 4,
a<sup>u<sub>1</sub></sup> = 59, y<sup>u<sub>2</sub></sup> = 24, <i>v</i> = 9), 
<br>       <img src="img/image620.png" height="23" width="12">8; 8, 3<img src="img/image621.png" height="22" width="10"> нет (h<sup>−1</sup> = 7, u<sub>1</sub> = 10, u<sub>2</sub> = 10, a<sup>u<sub>1</sub></sup> = 59, y<sup>u<sub>2</sub></sup> = 64, <i>v</i> = 2 <img src="img/image622.png" height="16" width="20"> 8), 
<br>       <img src="img/image620.png" height="23" width="12">7; 4, 1<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 8, u<sub>1</sub> = 8, u<sub>2</sub> = 1,
a<sup>u<sub>1</sub></sup> = 24, y<sup>u<sub>2</sub></sup> = 22, <i>v</i> = 4). 
<br>д. <img src="img/image620.png" height="23" width="12">10; 7, 3<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 10, u<sub>1</sub> = 8,
u<sub>2</sub> = 7, a<sup>u<sub>1</sub></sup> = 24, y<sup>u<sub>2</sub></sup> = 24, <i>v</i> = 7), 
<br>       <img src="img/image620.png" height="23" width="12">7; 7, 10<img src="img/image621.png" height="22" width="10"> да (h<sup>−1</sup> = 8, u<sub>1</sub> = 3, u<sub>2</sub> = 10, a<sup>u<sub>1</sub></sup> = 14, y<sup>u<sub>2</sub></sup> = 22, <i>v</i> = 7), 
<br>       <img src="img/image620.png" height="23" width="12">8; 7, 5<img src="img/image621.png" height="22" width="10"> нет (h<sup>−1</sup> = 7, u<sub>1</sub> = 2, u<sub>2</sub> = 6, a<sup>u<sub>1</sub></sup> = 22, y<sup>u<sub>2</sub></sup> = 59, <i>v</i> = 3 <img src="img/image622.png" height="16" width="20"> 7).  </p>     
<br>
<a name=6.1 class="anchor"></a>
<p><b>б.1.</b> а. <img src="img/image564.png" height="19" width="19"> = 103, <img src="img/image566.png" height="18" width="20"> = 52, r<sup>-1</sup> = 24, банкнота <img src="img/image620.png" height="23" width="12">11,58<img src="img/image621.png" height="22" width="10">. <br>       б. <img src="img/image564.png" height="19" width="19"> = 13, <img src="img/image566.png" height="18" width="20"> = 13, r<sup>-1</sup> = 20, банкнота <img src="img/image620.png" height="23" width="12">99,22<img src="img/image621.png" height="22" width="10">. <br>       в. <img src="img/image564.png" height="19" width="19"> = 58, <img src="img/image566.png" height="18" width="20"> = 74, r<sup>-1</sup> = 12, банкнота <img src="img/image620.png" height="23" width="12">55,55<img src="img/image621.png" height="22" width="10">. <br>       г. <img src="img/image564.png" height="19" width="19"> = 37, <img src="img/image566.png" height="18" width="20"> = 46, r<sup>-1</sup> = 8, банкнота <img src="img/image620.png" height="23" width="12">44,11<img src="img/image621.png" height="22" width="10">. <br>       д. <img src="img/image564.png" height="19" width="19"> = 49, <img src="img/image566.png" height="18" width="20"> = 70, r<sup>-1</sup> = 4, банкнота <img src="img/image620.png" height="23" width="12">77,42<img src="img/image621.png" height="22" width="10">.</p>
<br><br>
<!--конец-->
      
				

				</div>
			</div>
			
      </div>
    </div>
  </div>
	
	<!--Меню навигации по Темам -->	
	<div aria-label="..." class = "nav-menu">
	 <ul class="pager background-transition-slow">
		 <li title="Наверх" style = "margin-right:15px;	"><a class = "glyphicon glyphicon-menu-up page-scroll" href="#page-top"></a></li>
		 <li title="К предыдущей лекции"><a class = "glyphicon glyphicon-menu-left page-scroll" href="lec5.htm"></a></li>
		 <li title="В содержание"><a class = "glyphicon glyphicon-list-alt" href="lec_index.htm"></a></li>
		 <!--li title="К следующей лекции"><a class = "glyphicon glyphicon-menu-right page-scroll" href="lec7.htm"></a></li-->
	 </ul>
	</div>
	<!---->
	
	</div>
  <!-- jQuery -->
  <script src="../lib/js/jquery.js"></script>

  <!-- Bootstrap Core JavaScript -->
  <script src="../lib/js/bootstrap.min.js"></script>

  <!-- Scrolling Nav JavaScript -->
  <script src="../lib/js/jquery.easing.min.js"></script>
  <script src="../lib/js/scrolling-nav.js"></script>

</body>

</html>
